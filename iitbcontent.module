<?php

/**
 * @file
 * Contains iitbcontent.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
//use Drupal\Core\Routing;

/**
 * Implements hook_help().
 */
function iitbcontent_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the iitbcontent module.
    case 'help.page.iitbcontent':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function iitbcontent_theme() {
  return [
    'iitbcontent' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_search_api_query_alter.
 *
 * @param \Drupal\search_api\Query\QueryInterface $query
 */
/*function iitbcontent_search_api_query_alter(\Drupal\search_api\Query\QueryInterface &$query) {
  if ($query->getIndex()->getServerInstance()->supportsFeature('search_api_facets')) {
    // @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager 
    $facet_manager = \Drupal::service('facets.manager');

    $search_id = $query->getSearchId();
//     print_r($search_id);
    // If we find an attachment view query, we use the same query alter as the page because they belong together
    // if(strpos($search_id, 'views_attachment:solr_search_content__') === 0) {
    if(strpos($search_id, 'views_block:solr_search_content__') === 0) {
      $search_id = 'views_page:solr_search_content__page_1';

      // Add the active filters.
      $facet_manager->alterQuery($query, $search_id);
    }
  }
}*/

/**
 * Implements hook_form_FORM_ID_alter().
 */
/*function iitbcontent_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Add facets as hidden inputs to preserve selection.
  if ( isset($_GET['f']) ) {
	// && ADD ANY OTHER VIEW-IDENTIFYING CODE DESIRED
    // Get the parameters from the current page request.
    // $params = drupal_get_query_parameters();
    $params = \Drupal::routeMatch()->getParameters();
    // Add the facet values as hidden elements to the form.
    // The browser will turn them back into query parameters.
    foreach ( $params['f'] as $delta => $value ) {
      $form['f[' . $delta . ']'] = array(
        '#type' => 'hidden',
        '#value' => check_plain($value),
      );
    }
  }
}*/
